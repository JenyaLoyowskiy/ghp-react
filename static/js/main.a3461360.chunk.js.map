{"version":3,"sources":["components/Items/item.js","components/Comments/index.js","components/Items/index.js","components/Sidebar/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","onClick","this","className","isActive","name","comments","length","deleteCard","style","width","height","backgroundColor","border","React","Component","Comment","color","message","Comments","state","inputData","event","preventDefault","currentTask","localStorage","setItem","getItem","setState","currentComment","updateState","alert","split","map","el","key","Math","random","renderComments","onSubmit","addComment","type","value","onChange","target","Items","data","activeItem","undefined","text","elem","removeItem","newData","filter","display","marginBottom","addCard","placeholder","classList","SideBar","fontSize","Form","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3461360.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Item extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render(){\r\n    return(\r\n      <div\r\n        onClick={this.props.onClick}\r\n        className={\"task \" + (this.props.isActive ? 'active' : '')}\r\n      >\r\n        <span className=\"taskName\">\r\n          {this.props.name}\r\n        </span>\r\n          {this.props.comments ?\r\n            <div className=\"counter\">\r\n              {this.props.comments.length}\r\n            </div>\r\n            : ''}\r\n        <button\r\n          className=\"delete-btn\"\r\n          onClick={this.props.deleteCard}\r\n        >Delete</button>\r\n        <hr style={{width: '90%', height: '2px', backgroundColor: '#f8f8f8', border: 'none'}}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\r\n\r\nconst Comment = (props)=>(\r\n  <div>\r\n    <hr className=\"bottom-line\" style={{width: '100%', height: '2px', backgroundColor: '#f8f8f8', border: 'none'}}/>\r\n    <div className={\"profile-image \" + props.color}></div>\r\n    <div className=\"message\">{props.message}</div>\r\n  </div>\r\n)\r\n\r\nexport default class Comments extends React.Component {\r\n  state = {\r\n    inputData: '',\r\n  }\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  addComment(event){\r\n    event.preventDefault();\r\n    let { currentTask } = this.props;\r\n    if (currentTask) {\r\n      if (this.state.inputData) {\r\n        localStorage.setItem(currentTask, localStorage.getItem(currentTask) ? localStorage.getItem(currentTask) + '<break>' + this.state.inputData : this.state.inputData);\r\n        this.setState({currentComment: this.state.inputData, inputData: ''});\r\n        this.props.updateState('comment');\r\n      }else{\r\n        alert('Enter the message please')\r\n      }\r\n    } else {\r\n      alert('Please select a task!')\r\n    }\r\n  }\r\n  renderComments(){\r\n    const { currentTask } = this.props;\r\n    if (currentTask) {\r\n      let comments = localStorage.getItem(currentTask) ? localStorage.getItem(currentTask).split('<break>') : '';\r\n      if (comments) {\r\n        let color = 'purple';\r\n        return(\r\n          comments.map(el=>{\r\n            color === 'purple' ? color = 'orange' : color = 'purple'\r\n            return(\r\n              <Comment\r\n                message={el}\r\n                color={color}\r\n                key={Math.random()}\r\n              />\r\n            )\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"comments\">\r\n        <h1>{this.props.currentTask ? this.props.currentTask : ''}</h1>\r\n        <div className=\"comment-wrapper\">\r\n          {\r\n            this.renderComments()\r\n          }\r\n        </div>\r\n        <form\r\n          className=\"comment-subm\"\r\n          onSubmit={(event)=>{\r\n            this.addComment(event);\r\n        }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.inputData}\r\n            onChange={(event)=>{\r\n              this.setState({inputData: event.target.value})\r\n            }}\r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Item from './item.js';\r\nimport Comments from '../Comments';\r\n\r\nexport default class Items extends React.Component {\r\n  state = {\r\n    inputData: '',\r\n    data: localStorage.getItem('tasks') ? localStorage.getItem('tasks').split(',') : '',\r\n    activeItem: undefined\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  updateState(text){\r\n    this.setState({text})\r\n  }\r\n  addCard(){\r\n    let { data, inputData } = this.state;\r\n    if (inputData) {\r\n      localStorage.setItem('tasks', data ? data+ ',' + inputData : inputData);\r\n      this.setState({data: localStorage.getItem('tasks').split(','), inputData: ''});\r\n    } else {\r\n      alert('Enter the name of the task!');\r\n    }\r\n  }\r\n  deleteCard(elem){\r\n    localStorage.removeItem(elem);\r\n    if (this.state.data.length > 1) {\r\n      let newData = this.state.data.filter(el=>(el !== elem));\r\n      this.setState({data: newData});\r\n      localStorage.setItem('tasks', newData);\r\n    }else {\r\n      this.setState({data: ''});\r\n      localStorage.removeItem('tasks');\r\n    }\r\n    if (elem === this.state.activeItem) {\r\n      this.state.activeItem = undefined;\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div style={{display: 'contents'}}>\r\n        <div className=\"items-wrapper\">\r\n          <h1>Items</h1>\r\n          <form\r\n            style={{marginBottom: '10px'}}\r\n            onSubmit={(event)=>{\r\n              this.addCard();\r\n              event.preventDefault();\r\n            }}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.inputData}\r\n              placeholder=\"Type name here...\"\r\n              onChange={(event)=>{\r\n                this.setState({inputData: event.target.value})\r\n              }}\r\n            />\r\n            <button>Add new</button>\r\n          </form>\r\n          {\r\n            this.state.data ? this.state.data.map(el=>{\r\n              let comments = localStorage.getItem(el) ? localStorage.getItem(el).split('<break>') : null ;\r\n              return(\r\n                <Item\r\n                  name={el}\r\n                  comments={comments}\r\n                  key={Math.random()}\r\n                  deleteCard={()=>{this.deleteCard(el)}}\r\n                  onClick={(event)=>{if(event.target.classList[0] !== 'delete-btn'){this.setState({activeItem: el})}}}\r\n                  isActive={this.state.activeItem === el}\r\n                />\r\n              )\r\n            }) : ''\r\n          }\r\n        </div>\r\n        <Comments\r\n          currentTask={this.state.activeItem}\r\n          updateState={(text)=>{this.updateState(text)}}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nclass SideBar extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"sidebar\">\r\n        <p style={{fontSize: '22px'}}>Dairy app</p>\r\n        <span style={{color: '#808080', fontSize: '18px'}}>Comment with no sense</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport Items from '../Items';\r\nimport SideBar from '../Sidebar';\r\n\r\nconst Form = ()=>(\r\n  <div style={{display: 'flex', height: '100%'}}>\r\n    <SideBar/>\r\n    <Items/>\r\n  </div>\r\n)\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport Form from './components/Form';\nfunction App() {\n  return (\n    <Form/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}